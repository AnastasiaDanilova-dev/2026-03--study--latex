---
## Author
author:
  name: Данилова Анастасия Сергеевна
  email: 1132249523@pfur.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6

## Title
title: "Лабораторная работа №4"
subtitle: "Простейший вариант"
license: "CC BY"
---

# Цель работы

Цель данной работы научиться оформлять изображения в тексте, а также правильно работать с ссылками.

# Задание

Повторить приведенные примеры, а также выполнить упражнения:

- Попробуйте вставить созданное вами изображение, заменив "стандартные" изображения, которые мы
использовали в демонстрации.
- Узнайте, что вы можете сделать, используя клавиши height, width, angle и scale.
- Используйте клавишу width, чтобы задать размер графического изображения относительно textwidth, а
другого графического изображения - относительно linewidth. Посмотрите, как они ведут себя с опцией twocolumn или
без нее.
- Используйте lipsum, чтобы провести достаточно длинную демонстрацию, а затем попробуйте разместить
плавающие изображения, используя разные спецификаторы положения. Как
взаимодействуют разные спецификаторы?
- Попробуйте добавить в тестовый документ новые пронумерованные части (разделы, подразделы, списки с нумерацией)
и выясните, сколько запусков требуется для выполнения команд
label.
- Добавьте несколько плавающих изображений и посмотрите, что произойдет, если вы поставите label перед
caption, а не после; можете ли вы предсказать результат?
- Что произойдет, если вы поставите label для уравнения после end{уравнения}?



# Теоретическое введение

Вы можете использовать файлы формата EPS, PNG, JPG и PDF. Если у вас есть несколько версий
графического изображения, вы можете написать, например, example-image.png. (Пакет graphicx попытается угадать расширение, если вы его не укажете).
Команда includegraphics имеет множество опций для управления размером и формой
включаемых изображений, а также для обрезки материала. Некоторые из них часто используются, поэтому
о них стоит знать.
Наиболее очевидная вещь, которую нужно задать, - это ширина или высота изображения, которые часто задаются относительно textwidth или linewidth и textheight. 
Разница между textwidth и linewidth незначительна, и часто результат один и тот же. textwidth - это ширина текстового блока на физической странице, тогда как
linewidth - это текущая ширина, которая может отличаться на локальном уровне (разница наиболее очевидна опция class twocolumn). LaTeX автоматически масштабирует изображение таким образом, чтобы соотношение сторон оставалось правильным.
Более подробно про Unix см. в [@kotelnikov_chebotaev_book_latex2_ru; @lvovsky_book_latex_ru].

# Выполнение лабораторной работы

Попробуем вставить изображение по центру и укажем высоту 2.

![Простой пример](image/1.png){#fig-001 width=70%}

![Результат](image/2.png){#fig-002 width=70%}

Указываем размер картинки по высоте и ширине. В данном случае разница хорошо видна, но обычно, она не так заметно. Более яркое различие будет, если использовать параметр twocolumn. ([рис. @fig-004]).

![Второй пример](image/3.png){#fig-003 width=70%}

![Результат изменения размеров](image/4.png){#fig-004 width=70%}

Теперь попробуем обрезать картинку.

![Clip и trim](image/5.png){#fig-005 width=70%}

Посмотрим на результат ([рис. @fig-006]).

![Результат](image/6.png){#fig-006 width=70%}

Обычно изображения могут двигаться свободно по документу. Они называются плавающими. Поэтому мы будем использовать некоторые параметры, чтобы разместить объект там, где мы хотим.

![Спецификаторы](image/7.png){#fig-007 width=70%}

Есть несколько видов спецификаторов:

• h ‘здесь’ (если возможно)
• t верх страницы
• b низ страницы
• p выделенная страница для плавающих

![ht](image/8.png){#fig-008 width=70%}

Еще один вид - это H (дословный перевод "абсолютно точно здесь"). Обычно, его не рекомендуется использовать, так как могут образоваться большие пробелмы на странице.

![H](image/9.png){#fig-009 width=70%}

![Как выглядит H](image/10.png){#fig-010 width=70%}

Также могут понадобиться другие типы для плавающих объектов. Они встраиваются отдельно с помощью пакета  trivfloat.

![Расположение объекта](image/11.png){#fig-011 width=70%}

![Результат расположения](image/12.png){#fig-012 width=70%}

Теперь перейдем к ссылкам. 

![Ссылки](image/13.png){#fig-013 width=70%}

Для ссылок мы также подключаем новый пакет. А также обратим внимание, что для того, чтобы ссылка отображалась, документ нужно сконвертировать минимум дважды.

![Пример ссылки](image/14.png){#fig-014 width=70%}

Важно обращать внимание на расположение пакета. Он должен прогружаться после всех остальных.

![Пакет hyperref](image/15.png){#fig-015 width=70%}

![Результат hyperref](image/16.png){#fig-016 width=70%}

Теперь перейдем к упражнениям. В первом нам нужно было добавить свою картинку.

![Свое изображение](image/17.jpg){#fig-017 width=70%}

![Результат вывода](image/18.jpg){#fig-018 width=70%}

Далее нужно было попробовать отредактировать это изображение с помощью некоторых команд. Так как высоту и ширину мы уже рассматривали ранее, я решила попробовать scale и angle.

![Новые изменения](image/19.jpg){#fig-019 width=70%}

![Перевернутое и увеличенное изображение](image/20.jpg){#fig-020 width=70%}

Теперь смотрим, как поведут себя textwidth и linewidth, если режим одноколоночный и двуколоночный.

![Одна колонка](image/21.jpg){#fig-021 width=70%}

Изображения одинакового размера

![Одна колонка](image/22.jpg){#fig-022 width=70%}

![Две колонки](image/23.jpg){#fig-023 width=70%}

Здесь мы видим, что у изображений разный размер. Так как второе расположено в одной из двух колонок.

![Явные различия](image/24.jpg){#fig-024 width=70%}

Здесь смотрим как выглядят типы расположения объектов.

![Спецификаторы](image/25.jpg){#fig-025 width=70%}

![Тип h](image/26.jpg){#fig-026 width=70%}

Картинки расположились именно так, как мы задали. Но остальные съехали в конец документа.

![Тип t](image/27.jpg){#fig-027 width=70%}

Теперь попробуем добавить сами секции, подсекцию и нумерованный список. А также сделаем ссылки.

![Новые секции](image/28.jpg){#fig-028 width=70%}

![Результат после первой конвертации](image/29.jpg){#fig-029 width=70%}

![Вторая конвертация](image/30.jpg){#fig-030 width=70%}

Поробуем расположить label после caption вместо до

![Оба варианта расположения](image/31.jpg){#fig-031 width=70%}

![Результат неправильного названия](image/32.jpg){#fig-032 width=70%}

И последнее, посмотрим, что будет, если расположить label для уравнения после end{equation}?

![Уравнение](image/33.jpg){#fig-033 width=70%}
![Неверное отображение](image/34.jpg){#fig-034 width=70%}

Мы видим, что нумерация стоит отдельно от уравнения.

# Выводы

В ходе данной работы мы разобрались, как оформлять изображения в тексте, изменять их, а также, как правильно работать с ссылками.

# Список литературы{.unnumbered}

::: {#refs}
:::
